{"ast":null,"code":"import axios from \"axios\";\nexport const fetchSongs = async token => {\n  const PLAYLIST_ID = \"37i9dQZF1DXcBWIGoYBM5M\"; // Beispiel: Spotify Top 50 Global\n\n  try {\n    const url = `https://api.spotify.com/v1/playlists/${PLAYLIST_ID}/tracks`;\n    console.log(\"API-Anfrage an:\", url); // Debug: Welche URL wird aufgerufen?\n\n    const response = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log(\"Spotify API Response:\", response.data); // Debug: Antwort anzeigen\n\n    return response.data.items.map(item => {\n      var _item$track$album$ima;\n      return {\n        title: item.track.name,\n        artist: item.track.artists[0].name,\n        albumCover: ((_item$track$album$ima = item.track.album.images[0]) === null || _item$track$album$ima === void 0 ? void 0 : _item$track$album$ima.url) || \"\",\n        previewUrl: item.track.preview_url\n      };\n    });\n  } catch (error) {\n    var _error$response;\n    console.error(\"Fehler beim Abrufen der Songs:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","fetchSongs","token","PLAYLIST_ID","url","console","log","response","get","headers","Authorization","data","items","map","item","_item$track$album$ima","title","track","name","artist","artists","albumCover","album","images","previewUrl","preview_url","error","_error$response"],"sources":["/workspaces/Quizdiezweite/music-quiz/client/src/services/spotifyService.js"],"sourcesContent":["import axios from \"axios\";\n\nexport const fetchSongs = async (token) => {\n  const PLAYLIST_ID = \"37i9dQZF1DXcBWIGoYBM5M\"; // Beispiel: Spotify Top 50 Global\n\n  try {\n    const url = `https://api.spotify.com/v1/playlists/${PLAYLIST_ID}/tracks`;\n    console.log(\"API-Anfrage an:\", url); // Debug: Welche URL wird aufgerufen?\n    \n    const response = await axios.get(url, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n\n    console.log(\"Spotify API Response:\", response.data); // Debug: Antwort anzeigen\n\n    return response.data.items.map((item) => ({\n      title: item.track.name,\n      artist: item.track.artists[0].name,\n      albumCover: item.track.album.images[0]?.url || \"\",\n      previewUrl: item.track.preview_url,\n    }));\n  } catch (error) {\n    console.error(\"Fehler beim Abrufen der Songs:\", error.response?.data || error);\n    return [];\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,UAAU,GAAG,MAAOC,KAAK,IAAK;EACzC,MAAMC,WAAW,GAAG,wBAAwB,CAAC,CAAC;;EAE9C,IAAI;IACF,MAAMC,GAAG,GAAG,wCAAwCD,WAAW,SAAS;IACxEE,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,GAAG,CAAC,CAAC,CAAC;;IAErC,MAAMG,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAACJ,GAAG,EAAE;MACpCK,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUR,KAAK;MAAG;IAC9C,CAAC,CAAC;IAEFG,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEC,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;;IAErD,OAAOJ,QAAQ,CAACI,IAAI,CAACC,KAAK,CAACC,GAAG,CAAEC,IAAI;MAAA,IAAAC,qBAAA;MAAA,OAAM;QACxCC,KAAK,EAAEF,IAAI,CAACG,KAAK,CAACC,IAAI;QACtBC,MAAM,EAAEL,IAAI,CAACG,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC,CAACF,IAAI;QAClCG,UAAU,EAAE,EAAAN,qBAAA,GAAAD,IAAI,CAACG,KAAK,CAACK,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,cAAAR,qBAAA,uBAA1BA,qBAAA,CAA4BX,GAAG,KAAI,EAAE;QACjDoB,UAAU,EAAEV,IAAI,CAACG,KAAK,CAACQ;MACzB,CAAC;IAAA,CAAC,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA;IACdtB,OAAO,CAACqB,KAAK,CAAC,gCAAgC,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACnB,QAAQ,cAAAoB,eAAA,uBAAdA,eAAA,CAAgBhB,IAAI,KAAIe,KAAK,CAAC;IAC9E,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}