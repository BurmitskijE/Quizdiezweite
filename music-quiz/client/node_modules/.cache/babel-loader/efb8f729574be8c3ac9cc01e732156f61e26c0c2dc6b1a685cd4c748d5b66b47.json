{"ast":null,"code":"var _jsxFileName = \"/workspaces/Quizdiezweite/music-quiz/client/src/components/Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { fetchSongs } from \"../services/spotifyService\";\nimport Question from \"./Question\";\nimport \"./styles/animations.css\"; // Animationen einbinden\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Quiz = ({\n  token,\n  mode\n}) => {\n  _s();\n  const [songs, setSongs] = useState([]);\n  const [currentSong, setCurrentSong] = useState(null);\n  const [options, setOptions] = useState([]);\n  const [answer, setAnswer] = useState(\"\");\n  const [score, setScore] = useState(0);\n  const [feedback, setFeedback] = useState(\"\"); // Animation für richtig/falsch\n\n  useEffect(() => {\n    const loadSongs = async () => {\n      const data = await fetchSongs(token);\n      setSongs(data);\n      selectNewSong(data);\n    };\n    if (token) {\n      loadSongs();\n    }\n  }, [token]);\n  const selectNewSong = data => {\n    if (data.length === 0) return;\n    const song = data[Math.floor(Math.random() * data.length)];\n    setCurrentSong(song);\n    let incorrectOptions = data.filter(item => item !== song).sort(() => 0.5 - Math.random()).slice(0, 3);\n    const correctAnswer = mode === \"title\" ? song.title : song.artist;\n    const choices = mode === \"title\" ? [song.title, ...incorrectOptions.map(s => s.title)] : [song.artist, ...incorrectOptions.map(s => s.artist)];\n    setOptions(choices.sort(() => 0.5 - Math.random())); // Zufällige Reihenfolge\n    setAnswer(correctAnswer);\n  };\n  const checkAnswer = selected => {\n    if (selected === answer) {\n      setScore(score + 1);\n      setFeedback(\"correct\"); // Startet die Animation\n      setTimeout(() => {\n        setFeedback(\"\");\n        selectNewSong(songs);\n      }, 1000);\n    } else {\n      setFeedback(\"wrong\");\n      setTimeout(() => setFeedback(\"\"), 1000);\n    }\n  };\n  return currentSong ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl\",\n      children: [\"Punkte: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: currentSong.albumCover,\n      alt: \"Album Cover\",\n      className: \"album-cover\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), currentSong.previewUrl && /*#__PURE__*/_jsxDEV(\"audio\", {\n      src: currentSong.previewUrl,\n      controls: true,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(Question, {\n      questionText: `Welcher ${mode === \"title\" ? \"Titel\" : \"Künstler\"} gehört zu diesem Song?`,\n      options: options,\n      onAnswer: checkAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `feedback ${feedback}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Lade Songs...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(Quiz, \"tln5w14JjvZNmNManUQ0QSVjPKc=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","useEffect","fetchSongs","Question","jsxDEV","_jsxDEV","Quiz","token","mode","_s","songs","setSongs","currentSong","setCurrentSong","options","setOptions","answer","setAnswer","score","setScore","feedback","setFeedback","loadSongs","data","selectNewSong","length","song","Math","floor","random","incorrectOptions","filter","item","sort","slice","correctAnswer","title","artist","choices","map","s","checkAnswer","selected","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","albumCover","alt","previewUrl","controls","autoPlay","questionText","onAnswer","_c","$RefreshReg$"],"sources":["/workspaces/Quizdiezweite/music-quiz/client/src/components/Quiz.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { fetchSongs } from \"../services/spotifyService\";\nimport Question from \"./Question\";\nimport \"./styles/animations.css\"; // Animationen einbinden\n\nconst Quiz = ({ token, mode }) => {\n  const [songs, setSongs] = useState([]);\n  const [currentSong, setCurrentSong] = useState(null);\n  const [options, setOptions] = useState([]);\n  const [answer, setAnswer] = useState(\"\");\n  const [score, setScore] = useState(0);\n  const [feedback, setFeedback] = useState(\"\"); // Animation für richtig/falsch\n\n  useEffect(() => {\n    const loadSongs = async () => {\n      const data = await fetchSongs(token);\n      setSongs(data);\n      selectNewSong(data);\n    };\n\n    if (token) {\n      loadSongs();\n    }\n  }, [token]);\n\n  const selectNewSong = (data) => {\n    if (data.length === 0) return;\n    const song = data[Math.floor(Math.random() * data.length)];\n    setCurrentSong(song);\n\n    let incorrectOptions = data\n      .filter((item) => item !== song)\n      .sort(() => 0.5 - Math.random())\n      .slice(0, 3);\n\n    const correctAnswer = mode === \"title\" ? song.title : song.artist;\n    const choices = mode === \"title\"\n      ? [song.title, ...incorrectOptions.map((s) => s.title)]\n      : [song.artist, ...incorrectOptions.map((s) => s.artist)];\n\n    setOptions(choices.sort(() => 0.5 - Math.random())); // Zufällige Reihenfolge\n    setAnswer(correctAnswer);\n  };\n\n  const checkAnswer = (selected) => {\n    if (selected === answer) {\n      setScore(score + 1);\n      setFeedback(\"correct\"); // Startet die Animation\n      setTimeout(() => {\n        setFeedback(\"\");\n        selectNewSong(songs);\n      }, 1000);\n    } else {\n      setFeedback(\"wrong\");\n      setTimeout(() => setFeedback(\"\"), 1000);\n    }\n  };\n\n  return currentSong ? (\n    <div className=\"text-center\">\n      <h2 className=\"text-xl\">Punkte: {score}</h2>\n      <img src={currentSong.albumCover} alt=\"Album Cover\" className=\"album-cover\" />\n      {currentSong.previewUrl && <audio src={currentSong.previewUrl} controls autoPlay />}\n      \n      <Question \n        questionText={`Welcher ${mode === \"title\" ? \"Titel\" : \"Künstler\"} gehört zu diesem Song?`}\n        options={options}\n        onAnswer={checkAnswer}\n      />\n\n      <div className={`feedback ${feedback}`} />\n    </div>\n  ) : (\n    <p>Lade Songs...</p>\n  );\n};\n\nexport default Quiz;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}