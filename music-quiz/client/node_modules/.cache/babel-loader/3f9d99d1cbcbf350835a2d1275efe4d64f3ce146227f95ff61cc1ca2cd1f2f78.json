{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{useNavigate}from\"react-router-dom\";import{fetchSongs}from\"../services/spotifyService\";import Question from\"./Question\";import\"../styles/animations.css\";// Importiert CSS für Animationen\nimport{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const Quiz=_ref=>{let{token,mode}=_ref;const[songs,setSongs]=useState([]);const[currentSong,setCurrentSong]=useState(null);const[options,setOptions]=useState([]);const[answer,setAnswer]=useState(\"\");const[score,setScore]=useState(0);const[feedback,setFeedback]=useState(\"\");// Richtig/Falsch Animation\nconst[blurLevel,setBlurLevel]=useState(10);// Startet mit starkem Blur\nconst navigate=useNavigate();useEffect(()=>{const loadSongs=async()=>{const data=await fetchSongs(token);setSongs(data);selectNewSong(data);};if(token){loadSongs();}},[token]);const selectNewSong=data=>{if(data.length===0)return;const song=data[Math.floor(Math.random()*data.length)];setCurrentSong(song);let incorrectOptions=data.filter(item=>item!==song).sort(()=>0.5-Math.random()).slice(0,3);const correctAnswer=mode===\"title\"?song.title:song.artist;const choices=mode===\"title\"?[song.title,...incorrectOptions.map(s=>s.title)]:[song.artist,...incorrectOptions.map(s=>s.artist)];setOptions(choices.sort(()=>0.5-Math.random()));// Zufällige Reihenfolge\nsetAnswer(correctAnswer);};const checkAnswer=selected=>{if(selected===answer){setScore(score+1);setFeedback(\"correct\");// Startet die grüne Animation\n}else{setFeedback(\"wrong\");// Startet die rote Animation\n}setTimeout(()=>{setFeedback(\"\");// Animation zurücksetzen\nselectNewSong(songs);// Nächstes Lied laden\n},1000);};const handleBack=()=>{navigate(\"/gamemode\");};return currentSong?/*#__PURE__*/_jsxs(\"div\",{className:`text-center ${feedback}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"top-bar\",children:[/*#__PURE__*/_jsxs(\"p\",{className:\"login-status\",children:[\"Eingeloggt als: \",token.substring(0,10),\"...\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleBack,className:\"back-button\",children:\"\\u2B05 Zur\\xFCck zur \\xDCbersicht\"})]}),/*#__PURE__*/_jsxs(\"h2\",{className:\"text-xl\",children:[\"Punkte: \",score]}),/*#__PURE__*/_jsx(\"div\",{className:\"album-cover\",style:{filter:`blur(${blurLevel}px)`},children:/*#__PURE__*/_jsx(\"img\",{src:currentSong===null||currentSong===void 0?void 0:currentSong.albumCover,alt:\"Album Cover\"})}),currentSong.previewUrl&&/*#__PURE__*/_jsx(\"audio\",{src:currentSong.previewUrl,controls:true,autoPlay:true}),/*#__PURE__*/_jsx(Question,{questionText:`Welcher ${mode===\"title\"?\"Titel\":\"Künstler\"} gehört zu diesem Song?`,options:options,onAnswer:checkAnswer})]}):/*#__PURE__*/_jsx(\"p\",{children:\"Lade Songs...\"});};export default Quiz;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","fetchSongs","Question","jsxs","_jsxs","jsx","_jsx","Quiz","_ref","token","mode","songs","setSongs","currentSong","setCurrentSong","options","setOptions","answer","setAnswer","score","setScore","feedback","setFeedback","blurLevel","setBlurLevel","navigate","loadSongs","data","selectNewSong","length","song","Math","floor","random","incorrectOptions","filter","item","sort","slice","correctAnswer","title","artist","choices","map","s","checkAnswer","selected","setTimeout","handleBack","className","children","substring","onClick","style","src","albumCover","alt","previewUrl","controls","autoPlay","questionText","onAnswer"],"sources":["/workspaces/Quizdiezweite/music-quiz/client/src/components/Quiz.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { fetchSongs } from \"../services/spotifyService\";\nimport Question from \"./Question\";\nimport \"../styles/animations.css\"; // Importiert CSS für Animationen\n\nconst Quiz = ({ token, mode }) => {\n  const [songs, setSongs] = useState([]);\n  const [currentSong, setCurrentSong] = useState(null);\n  const [options, setOptions] = useState([]);\n  const [answer, setAnswer] = useState(\"\");\n  const [score, setScore] = useState(0);\n  const [feedback, setFeedback] = useState(\"\"); // Richtig/Falsch Animation\n  const [blurLevel, setBlurLevel] = useState(10); // Startet mit starkem Blur\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const loadSongs = async () => {\n      const data = await fetchSongs(token);\n      setSongs(data);\n      selectNewSong(data);\n    };\n\n    if (token) {\n      loadSongs();\n    }\n  }, [token]);\n\n  const selectNewSong = (data) => {\n    if (data.length === 0) return;\n    const song = data[Math.floor(Math.random() * data.length)];\n    setCurrentSong(song);\n\n    let incorrectOptions = data\n      .filter((item) => item !== song)\n      .sort(() => 0.5 - Math.random())\n      .slice(0, 3);\n\n    const correctAnswer = mode === \"title\" ? song.title : song.artist;\n    const choices = mode === \"title\"\n      ? [song.title, ...incorrectOptions.map((s) => s.title)]\n      : [song.artist, ...incorrectOptions.map((s) => s.artist)];\n\n    setOptions(choices.sort(() => 0.5 - Math.random())); // Zufällige Reihenfolge\n    setAnswer(correctAnswer);\n  };\n\n  const checkAnswer = (selected) => {\n    if (selected === answer) {\n      setScore(score + 1);\n      setFeedback(\"correct\"); // Startet die grüne Animation\n    } else {\n      setFeedback(\"wrong\"); // Startet die rote Animation\n    }\n\n    setTimeout(() => {\n      setFeedback(\"\"); // Animation zurücksetzen\n      selectNewSong(songs); // Nächstes Lied laden\n    }, 1000);\n  };\n\n  const handleBack = () => {\n    navigate(\"/gamemode\");\n  };\n\n  return currentSong ? (\n    <div className={`text-center ${feedback}`}>\n      <div className=\"top-bar\">\n        <p className=\"login-status\">Eingeloggt als: {token.substring(0, 10)}...</p>\n        <button onClick={handleBack} className=\"back-button\">\n          ⬅ Zurück zur Übersicht\n        </button>\n      </div>\n      <h2 className=\"text-xl\">Punkte: {score}</h2>\n      <div className=\"album-cover\" style={{ filter: `blur(${blurLevel}px)` }}>\n        <img src={currentSong?.albumCover} alt=\"Album Cover\" />\n      </div>\n      {currentSong.previewUrl && <audio src={currentSong.previewUrl} controls autoPlay />}\n\n      <Question \n        questionText={`Welcher ${mode === \"title\" ? \"Titel\" : \"Künstler\"} gehört zu diesem Song?`}\n        options={options}\n        onAnswer={checkAnswer}\n      />\n    </div>\n  ) : (\n    <p>Lade Songs...</p>\n  );\n};\n\nexport default Quiz;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}