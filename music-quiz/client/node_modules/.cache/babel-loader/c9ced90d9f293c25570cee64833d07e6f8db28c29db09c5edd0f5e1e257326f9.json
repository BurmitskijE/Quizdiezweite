{"ast":null,"code":"var _jsxFileName = \"/workspaces/Quizdiezweite/music-quiz/client/src/components/SongQuiz.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst navigate = useNavigate();\nconst SongQuiz = ({\n  accessToken,\n  playlistId,\n  deviceId\n}) => {\n  _s();\n  const [songs, setSongs] = useState([]);\n  const [currentSong, setCurrentSong] = useState(null);\n  const [options, setOptions] = useState([]);\n  const [feedback, setFeedback] = useState(\"\");\n  useEffect(() => {\n    const fetchTracks = async () => {\n      const res = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      const data = await res.json();\n      const tracks = data.items.map(item => ({\n        id: item.track.id,\n        uri: item.track.uri,\n        name: item.track.name\n      })).filter(track => track.id);\n      setSongs(tracks);\n      startNewRound(tracks);\n    };\n    if (playlistId) fetchTracks();\n  }, [playlistId]);\n  const startNewRound = tracks => {\n    const shuffled = [...tracks].sort(() => 0.5 - Math.random());\n    setCurrentSong(shuffled[0]);\n    setOptions(shuffled.slice(0, 4));\n  };\n  const playSong = async () => {\n    if (!deviceId || !currentSong) {\n      console.error(\"❌ Kein gültiges Gerät oder Song gefunden!\");\n      return;\n    }\n    console.log(\"🎵 Starte Song:\", currentSong.name, \"auf Gerät:\", deviceId);\n    try {\n      const res = await fetch(\"https://api.spotify.com/v1/me/player/play\", {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          device_id: deviceId,\n          uris: [currentSong.uri]\n        })\n      });\n      if (!res.ok) {\n        console.error(\"❌ Fehler beim Abspielen des Songs:\", await res.text());\n      } else {\n        console.log(\"✅ Song erfolgreich gestartet!\");\n      }\n    } catch (error) {\n      console.error(\"❌ Fehler beim Starten des Songs:\", error);\n    }\n  };\n  useEffect(() => {\n    if (currentSong) playSong();\n  }, [currentSong]);\n  const checkAnswer = selectedTrack => {\n    if (selectedTrack.id === currentSong.id) {\n      setFeedback(\"✅ Richtig!\");\n    } else {\n      setFeedback(`❌ Falsch! Richtig wäre: ${currentSong.name}`);\n    }\n    setTimeout(() => startNewRound(songs), 2000);\n  };\n  const playRandomPart = async () => {\n    if (!deviceId || !currentSong) return;\n    const trackDurationMs = currentSong.duration_ms || 180000; // Falls nicht verfügbar, default: 3min\n    const randomStartMs = Math.floor(Math.random() * (trackDurationMs - 15000)); // Starte irgendwo im Song\n\n    console.log(`🎵 Starte Song für 15 Sekunden ab: ${randomStartMs}ms`);\n    await fetch(\"https://api.spotify.com/v1/me/player/play\", {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        uris: [currentSong.uri],\n        position_ms: randomStartMs\n      })\n    });\n\n    // Stoppe nach 15 Sekunden automatisch\n    setTimeout(() => {\n      stopPlayback();\n      setFeedback(`⏳ Zeit abgelaufen! Richtige Antwort: ${currentSong.name}`);\n      setTimeout(() => startNewRound(songs), 3000);\n    }, 15000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/\"),\n      className: \"back-button\",\n      children: \"\\u2B05 Zur\\xFCck zur \\xDCbersicht\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Errate den Song! \\uD83C\\uDFB5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: feedback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), options.map(track => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => checkAnswer(track),\n      className: \"quiz-button\",\n      children: track.name\n    }, track.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(SongQuiz, \"4lFFtuvWXW2tYrYrm+8EmitQjvQ=\");\n_c = SongQuiz;\nexport default SongQuiz;\nvar _c;\n$RefreshReg$(_c, \"SongQuiz\");","map":{"version":3,"names":["useEffect","useState","useNavigate","jsxDEV","_jsxDEV","navigate","SongQuiz","accessToken","playlistId","deviceId","_s","songs","setSongs","currentSong","setCurrentSong","options","setOptions","feedback","setFeedback","fetchTracks","res","fetch","headers","Authorization","data","json","tracks","items","map","item","id","track","uri","name","filter","startNewRound","shuffled","sort","Math","random","slice","playSong","console","error","log","method","body","JSON","stringify","device_id","uris","ok","text","checkAnswer","selectedTrack","setTimeout","playRandomPart","trackDurationMs","duration_ms","randomStartMs","floor","position_ms","stopPlayback","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/Quizdiezweite/music-quiz/client/src/components/SongQuiz.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst navigate = useNavigate();\n\nconst SongQuiz = ({ accessToken, playlistId, deviceId }) => {\n  const [songs, setSongs] = useState([]);\n  const [currentSong, setCurrentSong] = useState(null);\n  const [options, setOptions] = useState([]);\n  const [feedback, setFeedback] = useState(\"\");\n\n  useEffect(() => {\n    const fetchTracks = async () => {\n      const res = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        headers: { Authorization: `Bearer ${accessToken}` },\n      });\n      const data = await res.json();\n      const tracks = data.items\n        .map((item) => ({\n          id: item.track.id,\n          uri: item.track.uri,\n          name: item.track.name,\n        }))\n        .filter((track) => track.id);\n      setSongs(tracks);\n      startNewRound(tracks);\n    };\n\n    if (playlistId) fetchTracks();\n  }, [playlistId]);\n\n  const startNewRound = (tracks) => {\n    const shuffled = [...tracks].sort(() => 0.5 - Math.random());\n    setCurrentSong(shuffled[0]);\n    setOptions(shuffled.slice(0, 4));\n  };\n\n  const playSong = async () => {\n    if (!deviceId || !currentSong) {\n      console.error(\"❌ Kein gültiges Gerät oder Song gefunden!\");\n      return;\n    }\n\n    console.log(\"🎵 Starte Song:\", currentSong.name, \"auf Gerät:\", deviceId);\n\n    try {\n      const res = await fetch(\"https://api.spotify.com/v1/me/player/play\", {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ device_id: deviceId, uris: [currentSong.uri] }),\n      });\n\n      if (!res.ok) {\n        console.error(\"❌ Fehler beim Abspielen des Songs:\", await res.text());\n      } else {\n        console.log(\"✅ Song erfolgreich gestartet!\");\n      }\n    } catch (error) {\n      console.error(\"❌ Fehler beim Starten des Songs:\", error);\n    }\n  };\n\n  useEffect(() => {\n    if (currentSong) playSong();\n  }, [currentSong]);\n\n  const checkAnswer = (selectedTrack) => {\n    if (selectedTrack.id === currentSong.id) {\n      setFeedback(\"✅ Richtig!\");\n    } else {\n      setFeedback(`❌ Falsch! Richtig wäre: ${currentSong.name}`);\n    }\n    setTimeout(() => startNewRound(songs), 2000);\n  };\n  const playRandomPart = async () => {\n    if (!deviceId || !currentSong) return;\n  \n    const trackDurationMs = currentSong.duration_ms || 180000; // Falls nicht verfügbar, default: 3min\n    const randomStartMs = Math.floor(Math.random() * (trackDurationMs - 15000)); // Starte irgendwo im Song\n  \n    console.log(`🎵 Starte Song für 15 Sekunden ab: ${randomStartMs}ms`);\n  \n    await fetch(\"https://api.spotify.com/v1/me/player/play\", {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        uris: [currentSong.uri],\n        position_ms: randomStartMs,\n      }),\n    });\n  \n    // Stoppe nach 15 Sekunden automatisch\n    setTimeout(() => {\n      stopPlayback();\n      setFeedback(`⏳ Zeit abgelaufen! Richtige Antwort: ${currentSong.name}`);\n      setTimeout(() => startNewRound(songs), 3000);\n    }, 15000);\n  };\n  return (\n    <div className=\"quiz-container\">\n        <button onClick={() => navigate(\"/\")} className=\"back-button\">\n            ⬅ Zurück zur Übersicht\n         </button>\n      <h2>Errate den Song! 🎵</h2>\n      <p>{feedback}</p>\n      {options.map((track) => (\n        <button key={track.id} onClick={() => checkAnswer(track)} className=\"quiz-button\">\n          {track.name}\n        </button>\n      ))}\n    </div>\n    \n  );\n};\n\nexport default SongQuiz;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}