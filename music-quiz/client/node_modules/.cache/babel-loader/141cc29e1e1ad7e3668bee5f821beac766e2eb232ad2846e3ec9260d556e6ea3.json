{"ast":null,"code":"var _jsxFileName = \"/workspaces/Quizdiezweite/music-quiz/client/src/components/SpotifyPlayer.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpotifyPlayer = ({\n  accessToken,\n  onReady\n}) => {\n  _s();\n  const [player, setPlayer] = useState(null);\n  const [deviceId, setDeviceId] = useState(null);\n  useEffect(() => {\n    if (!accessToken) return;\n    const script = document.createElement(\"script\");\n    script.src = \"https://sdk.scdn.co/spotify-player.js\";\n    script.async = true;\n    document.body.appendChild(script);\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      const newPlayer = new window.Spotify.Player({\n        name: \"Song Quiz Player\",\n        getOAuthToken: cb => cb(accessToken),\n        volume: 0.5\n      });\n      newPlayer.addListener(\"ready\", async ({\n        device_id\n      }) => {\n        console.log(\"‚úÖ Spotify Player ist bereit mit ID:\", device_id);\n        setDeviceId(device_id);\n        onReady(device_id);\n        await activateDevice(device_id); // Ger√§t aktivieren\n      });\n      newPlayer.addListener(\"not_ready\", ({\n        device_id\n      }) => {\n        console.error(\"‚ùå Spotify Player ist nicht bereit!\", device_id);\n      });\n      newPlayer.connect().then(success => {\n        if (success) {\n          console.log(\"üéµ Spotify Player erfolgreich verbunden!\");\n        } else {\n          console.error(\"‚ùå Verbindung zum Spotify Player fehlgeschlagen!\");\n        }\n      });\n      setPlayer(newPlayer);\n    };\n  }, [accessToken]);\n  const activateDevice = async deviceId => {\n    try {\n      console.log(\"üîÑ Ger√§t aktivieren:\", deviceId);\n      const res = await fetch(\"https://api.spotify.com/v1/me/player\", {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          device_ids: [deviceId],\n          play: false\n        })\n      });\n      if (!res.ok) {\n        console.error(\"‚ùå Fehler beim Aktivieren des Players:\", await res.text());\n      } else {\n        console.log(\"‚úÖ Ger√§t erfolgreich als Spotify-Wiedergabeger√§t gesetzt.\");\n      }\n    } catch (error) {\n      console.error(\"‚ùå Fehler beim Aktivieren des Spotify-Ger√§ts:\", error);\n    }\n  };\n  const transferPlayback = async () => {\n    try {\n      await fetch(\"https://api.spotify.com/v1/me/player\", {\n        method: \"PUT\",\n        headers: {\n          \"Authorization\": `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          device_ids: [deviceId],\n          play: true\n        })\n      });\n      console.log(\"‚úÖ Wiedergabe auf anderem Ger√§t gestartet!\");\n    } catch (error) {\n      console.error(\"‚ùå Fehler beim √úbertragen der Wiedergabe:\", error);\n    }\n  };\n  if (!currentTrack || !currentTrack.uri) {\n    console.error(\"‚ùå Fehler: Keine g√ºltige Song-URI gefunden!\", currentTrack);\n    return;\n  }\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: deviceId ? \"Player bereit! üéµ\" : \"Lade Spotify Player...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 10\n  }, this);\n};\n_s(SpotifyPlayer, \"lfiv0x8k5Zqw7a2f6o+oKoAmeSE=\");\n_c = SpotifyPlayer;\nexport default SpotifyPlayer;\nvar _c;\n$RefreshReg$(_c, \"SpotifyPlayer\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","SpotifyPlayer","accessToken","onReady","_s","player","setPlayer","deviceId","setDeviceId","script","document","createElement","src","async","body","appendChild","window","onSpotifyWebPlaybackSDKReady","newPlayer","Spotify","Player","name","getOAuthToken","cb","volume","addListener","device_id","console","log","activateDevice","error","connect","then","success","res","fetch","method","headers","Authorization","JSON","stringify","device_ids","play","ok","text","transferPlayback","currentTrack","uri","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/Quizdiezweite/music-quiz/client/src/components/SpotifyPlayer.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst SpotifyPlayer = ({ accessToken, onReady }) => {\n  const [player, setPlayer] = useState(null);\n  const [deviceId, setDeviceId] = useState(null);\n\n  useEffect(() => {\n    if (!accessToken) return;\n\n    const script = document.createElement(\"script\");\n    script.src = \"https://sdk.scdn.co/spotify-player.js\";\n    script.async = true;\n    document.body.appendChild(script);\n\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      const newPlayer = new window.Spotify.Player({\n        name: \"Song Quiz Player\",\n        getOAuthToken: (cb) => cb(accessToken),\n        volume: 0.5,\n      });\n\n      newPlayer.addListener(\"ready\", async ({ device_id }) => {\n        console.log(\"‚úÖ Spotify Player ist bereit mit ID:\", device_id);\n        setDeviceId(device_id);\n        onReady(device_id);\n        await activateDevice(device_id); // Ger√§t aktivieren\n      });\n\n      newPlayer.addListener(\"not_ready\", ({ device_id }) => {\n        console.error(\"‚ùå Spotify Player ist nicht bereit!\", device_id);\n      });\n\n      newPlayer.connect().then((success) => {\n        if (success) {\n          console.log(\"üéµ Spotify Player erfolgreich verbunden!\");\n        } else {\n          console.error(\"‚ùå Verbindung zum Spotify Player fehlgeschlagen!\");\n        }\n      });\n\n      setPlayer(newPlayer);\n    };\n  }, [accessToken]);\n\n  const activateDevice = async (deviceId) => {\n    try {\n      console.log(\"üîÑ Ger√§t aktivieren:\", deviceId);\n  \n      const res = await fetch(\"https://api.spotify.com/v1/me/player\", {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ device_ids: [deviceId], play: false }),\n      });\n  \n      if (!res.ok) {\n        console.error(\"‚ùå Fehler beim Aktivieren des Players:\", await res.text());\n      } else {\n        console.log(\"‚úÖ Ger√§t erfolgreich als Spotify-Wiedergabeger√§t gesetzt.\");\n      }\n    } catch (error) {\n      console.error(\"‚ùå Fehler beim Aktivieren des Spotify-Ger√§ts:\", error);\n    }\n  };\nconst transferPlayback = async () => {\n  try {\n    await fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      headers: {\n        \"Authorization\": `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ device_ids: [deviceId], play: true }),\n    });\n    console.log(\"‚úÖ Wiedergabe auf anderem Ger√§t gestartet!\");\n  } catch (error) {\n    console.error(\"‚ùå Fehler beim √úbertragen der Wiedergabe:\", error);\n  }\n};\n\nif (!currentTrack || !currentTrack.uri) {\n  console.error(\"‚ùå Fehler: Keine g√ºltige Song-URI gefunden!\", currentTrack);\n  return;\n}\n  return <p>{deviceId ? \"Player bereit! üéµ\" : \"Lade Spotify Player...\"}</p>;\n};\n\n\nexport default SpotifyPlayer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}