{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{fetchSongs}from\"../services/spotifyService\";import Question from\"./Question\";import\"../styles/animations.css\";// Importiert CSS für Animationen\nimport{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const Quiz=_ref=>{let{token,mode}=_ref;const[songs,setSongs]=useState([]);const[currentSong,setCurrentSong]=useState(null);const[options,setOptions]=useState([]);const[answer,setAnswer]=useState(\"\");const[score,setScore]=useState(0);const[feedback,setFeedback]=useState(\"\");// Richtig/Falsch Animation\nuseEffect(()=>{const loadSongs=async()=>{const data=await fetchSongs(token);setSongs(data);selectNewSong(data);};if(token){loadSongs();}},[token]);const selectNewSong=data=>{if(data.length===0)return;const song=data[Math.floor(Math.random()*data.length)];setCurrentSong(song);let incorrectOptions=data.filter(item=>item!==song).sort(()=>0.5-Math.random()).slice(0,3);const correctAnswer=mode===\"title\"?song.title:song.artist;const choices=mode===\"title\"?[song.title,...incorrectOptions.map(s=>s.title)]:[song.artist,...incorrectOptions.map(s=>s.artist)];setOptions(choices.sort(()=>0.5-Math.random()));// Zufällige Reihenfolge\nsetAnswer(correctAnswer);};const checkAnswer=selected=>{if(selected===answer){setScore(score+1);setFeedback(\"correct\");// Startet die grüne Animation\n}else{setFeedback(\"wrong\");// Startet die rote Animation\n}setTimeout(()=>{setFeedback(\"\");// Animation zurücksetzen\nselectNewSong(songs);// Nächstes Lied laden\n},1000);};return currentSong?/*#__PURE__*/_jsxs(\"div\",{className:`text-center ${feedback}`,children:[/*#__PURE__*/_jsxs(\"h2\",{className:\"text-xl\",children:[\"Punkte: \",score]}),/*#__PURE__*/_jsx(\"div\",{className:\"album-cover-container\",children:/*#__PURE__*/_jsx(\"img\",{src:currentSong.albumCover,alt:\"Album Cover\",className:\"album-cover blurred\"})}),currentSong.previewUrl&&/*#__PURE__*/_jsx(\"audio\",{src:currentSong.previewUrl,controls:true,autoPlay:true}),/*#__PURE__*/_jsx(Question,{questionText:`Welcher ${mode===\"title\"?\"Titel\":\"Künstler\"} gehört zu diesem Song?`,options:options,onAnswer:checkAnswer})]}):/*#__PURE__*/_jsx(\"p\",{children:\"Lade Songs...\"});};export default Quiz;/*import { useEffect, useState } from \"react\";\n\nconst Quiz = ({ accessToken, playlistId, deviceId }) => {\n  const [songs, setSongs] = useState([]);\n  const [currentSong, setCurrentSong] = useState(null);\n  const [options, setOptions] = useState([]);\n  const [feedback, setFeedback] = useState(\"\");\n\n  useEffect(() => {\n    const fetchTracks = async () => {\n      const res = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        headers: { Authorization: `Bearer ${accessToken}` },\n      });\n      const data = await res.json();\n      const tracks = data.items\n        .map((item) => ({\n          id: item.track.id,\n          uri: item.track.uri,\n          name: item.track.name,\n        }))\n        .filter((track) => track.id);\n      setSongs(tracks);\n      startNewRound(tracks);\n    };\n\n    if (playlistId) fetchTracks();\n  }, [playlistId]);\n\n  const startNewRound = (tracks) => {\n    const shuffled = [...tracks].sort(() => 0.5 - Math.random());\n    setCurrentSong(shuffled[0]);\n    setOptions(shuffled.slice(0, 4));\n  };\n\n  const playSong = async () => {\n    if (!deviceId || !currentSong) return;\n    await fetch(\"https://api.spotify.com/v1/me/player/play\", {\n      method: \"PUT\",\n      headers: { Authorization: `Bearer ${accessToken}`, \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ device_id: deviceId, uris: [currentSong.uri] }),\n    });\n  };\n\n  useEffect(() => {\n    if (currentSong) playSong();\n  }, [currentSong]);\n\n  const checkAnswer = (selectedTrack) => {\n    if (selectedTrack.id === currentSong.id) {\n      setFeedback(\"✅ Richtig!\");\n    } else {\n      setFeedback(`❌ Falsch! Richtig wäre: ${currentSong.name}`);\n    }\n    setTimeout(() => startNewRound(songs), 2000);\n  };\n\n  return (\n    <div>\n      <h2>Errate den Song! 🎵</h2>\n      <p>{feedback}</p>\n      {options.map((track) => (\n        <button key={track.id} onClick={() => checkAnswer(track)}>\n          {track.name}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default Quiz;\n*/","map":{"version":3,"names":["React","useState","useEffect","fetchSongs","Question","jsxs","_jsxs","jsx","_jsx","Quiz","_ref","token","mode","songs","setSongs","currentSong","setCurrentSong","options","setOptions","answer","setAnswer","score","setScore","feedback","setFeedback","loadSongs","data","selectNewSong","length","song","Math","floor","random","incorrectOptions","filter","item","sort","slice","correctAnswer","title","artist","choices","map","s","checkAnswer","selected","setTimeout","className","children","src","albumCover","alt","previewUrl","controls","autoPlay","questionText","onAnswer"],"sources":["/workspaces/Quizdiezweite/music-quiz/client/src/components/Quiz.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { fetchSongs } from \"../services/spotifyService\";\nimport Question from \"./Question\";\nimport \"../styles/animations.css\"; // Importiert CSS für Animationen\n\nconst Quiz = ({ token, mode }) => {\n  const [songs, setSongs] = useState([]);\n  const [currentSong, setCurrentSong] = useState(null);\n  const [options, setOptions] = useState([]);\n  const [answer, setAnswer] = useState(\"\");\n  const [score, setScore] = useState(0);\n  const [feedback, setFeedback] = useState(\"\"); // Richtig/Falsch Animation\n\n  useEffect(() => {\n    const loadSongs = async () => {\n      const data = await fetchSongs(token);\n      setSongs(data);\n      selectNewSong(data);\n    };\n\n    if (token) {\n      loadSongs();\n    }\n  }, [token]);\n\n  const selectNewSong = (data) => {\n    if (data.length === 0) return;\n    const song = data[Math.floor(Math.random() * data.length)];\n    setCurrentSong(song);\n\n    let incorrectOptions = data\n      .filter((item) => item !== song)\n      .sort(() => 0.5 - Math.random())\n      .slice(0, 3);\n\n    const correctAnswer = mode === \"title\" ? song.title : song.artist;\n    const choices = mode === \"title\"\n      ? [song.title, ...incorrectOptions.map((s) => s.title)]\n      : [song.artist, ...incorrectOptions.map((s) => s.artist)];\n\n    setOptions(choices.sort(() => 0.5 - Math.random())); // Zufällige Reihenfolge\n    setAnswer(correctAnswer);\n  };\n\n  const checkAnswer = (selected) => {\n    if (selected === answer) {\n      setScore(score + 1);\n      setFeedback(\"correct\"); // Startet die grüne Animation\n    } else {\n      setFeedback(\"wrong\"); // Startet die rote Animation\n    }\n\n    setTimeout(() => {\n      setFeedback(\"\"); // Animation zurücksetzen\n      selectNewSong(songs); // Nächstes Lied laden\n    }, 1000);\n  };\n\n  return currentSong ? (\n    <div className={`text-center ${feedback}`}>\n      <h2 className=\"text-xl\">Punkte: {score}</h2>\n      <div className=\"album-cover-container\">\n      <img \n      src={currentSong.albumCover} \n      alt=\"Album Cover\" \n      className=\"album-cover blurred\"\n      />\n      </div>\n      {currentSong.previewUrl && <audio src={currentSong.previewUrl} controls autoPlay />}\n\n      <Question \n        questionText={`Welcher ${mode === \"title\" ? \"Titel\" : \"Künstler\"} gehört zu diesem Song?`}\n        options={options}\n        onAnswer={checkAnswer}\n      />\n    </div>\n  ) : (\n    <p>Lade Songs...</p>\n  );\n};\n\nexport default Quiz;\n\n\n\n/*import { useEffect, useState } from \"react\";\n\nconst Quiz = ({ accessToken, playlistId, deviceId }) => {\n  const [songs, setSongs] = useState([]);\n  const [currentSong, setCurrentSong] = useState(null);\n  const [options, setOptions] = useState([]);\n  const [feedback, setFeedback] = useState(\"\");\n\n  useEffect(() => {\n    const fetchTracks = async () => {\n      const res = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        headers: { Authorization: `Bearer ${accessToken}` },\n      });\n      const data = await res.json();\n      const tracks = data.items\n        .map((item) => ({\n          id: item.track.id,\n          uri: item.track.uri,\n          name: item.track.name,\n        }))\n        .filter((track) => track.id);\n      setSongs(tracks);\n      startNewRound(tracks);\n    };\n\n    if (playlistId) fetchTracks();\n  }, [playlistId]);\n\n  const startNewRound = (tracks) => {\n    const shuffled = [...tracks].sort(() => 0.5 - Math.random());\n    setCurrentSong(shuffled[0]);\n    setOptions(shuffled.slice(0, 4));\n  };\n\n  const playSong = async () => {\n    if (!deviceId || !currentSong) return;\n    await fetch(\"https://api.spotify.com/v1/me/player/play\", {\n      method: \"PUT\",\n      headers: { Authorization: `Bearer ${accessToken}`, \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ device_id: deviceId, uris: [currentSong.uri] }),\n    });\n  };\n\n  useEffect(() => {\n    if (currentSong) playSong();\n  }, [currentSong]);\n\n  const checkAnswer = (selectedTrack) => {\n    if (selectedTrack.id === currentSong.id) {\n      setFeedback(\"✅ Richtig!\");\n    } else {\n      setFeedback(`❌ Falsch! Richtig wäre: ${currentSong.name}`);\n    }\n    setTimeout(() => startNewRound(songs), 2000);\n  };\n\n  return (\n    <div>\n      <h2>Errate den Song! 🎵</h2>\n      <p>{feedback}</p>\n      {options.map((track) => (\n        <button key={track.id} onClick={() => checkAnswer(track)}>\n          {track.name}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default Quiz;\n*/"],"mappings":"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BC,GAAG,CAAC,aAAa,CACjBJ,SAAS,CAAC,qBAAqB,CAC9B,CAAC,CACG,CAAC,CACLhC,WAAW,CAACqC,UAAU,eAAI5C,IAAA,UAAOyC,GAAG,CAAElC,WAAW,CAACqC,UAAW,CAACC,QAAQ,MAACC,QAAQ,MAAE,CAAC,cAEnF9C,IAAA,CAACJ,QAAQ,EACPmD,YAAY,CAAE,WAAW3C,IAAI,GAAK,OAAO,CAAG,OAAO,CAAG,UAAU,yBAA0B,CAC1FK,OAAO,CAAEA,OAAQ,CACjBuC,QAAQ,CAAEZ,WAAY,CACvB,CAAC,EACC,CAAC,cAENpC,IAAA,MAAAwC,QAAA,CAAG,eAAa,CAAG,CACpB,CACH,CAAC,CAED,cAAe,CAAAvC,IAAI,CAInB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}